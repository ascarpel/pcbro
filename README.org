#+title: pcbro: Wire-Cell PCB Anode Readout Package

This WCT user package provides some Wire-Cell Toolkit components and support code for the PCB anode readout (pcbro) R&D and specifically its use in the 50L test detector.

* Install

This package provides a Wire-Cell Toolkit User Package (WCUP) building a WCT plugin library and it provides a python module.  It requires these two parts of a usual Wire-Cell Toolkit installation.

** Install Wire-Cell Toolkit Plugin Library

#+begin_example
  $ ./wcb configure --prefix=/path/to/install \
        --with-wct=$HOME/opt/wct \
        [...maybe other --with-* flags...]
  $ ./wcb --notests install
  $ ./wcb --alltests
#+end_example

Note, the install library location must be added to ~LD_LIBRARY_PATH~ and you may want to add ~pcbro~ cfg area to ~WIRECELL_PATH~.  Assuming these variables have already been configured for WCT itself:

#+begin_example
  $ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/install/lib
  $ WIRECELL_PATH=$WIRECELL_PATH:/path/to/pcbro/cfg
#+end_example

** Python module and CLI

The ~pcbro~ package provides a ~wirecell.pcbro~ Python module and a CLI called as ~wirecell-pcbro~.  It is used for generating PCB anode "wires" files and for processing Garfield output into WCT response file.  It also provides various diagnostic plots.  It is most easily installed alongside the WCT Python modules.  Note, Python3 is required.

#+begin_example
  $ python3 -m venv venv
  $ source venv/bin/activate

  $ cd /path/to/wire-cell-toolkit/python
  $ python -m pip install -e .  
  
  $ cd /path/to/pcbro/python
  $ python -m pip install -e .
#+end_example

* Roadmap

The development roadmap for this package is roughly:

- [X] generate initial package skeleton with [[https://github.com/brettviren/moo][moo]].
- [X] raw data decoder for the ~.bin~ files produced by the 50L DAQ.
- [X] a WCT "source" component that will provide this data as WCT tensors
- [X] a WCT configuration to convert ~.bin~ to ~.npz~ files
- [X] produce event displays to confirm decoder works
- [X] produce fake WCT "wires file" mostly to serve as channel map (save to ~wire-cell-data~)
- [X] develop WCT configuration to run sigproc on ~.bin~ and save results to zero-padded ~.npz~ (with bogus use of PDSP field response functions)
- [ ] progress though field roadmap (below)

- [ ] understand and fix the apparent wrap-around in SP data ([[https://github.com/brettviren/pcbro/issues/1][issue 1]])
- [X] job configuration to save ADC-level and SP-level data to Magnify files. ([[https://github.com/brettviren/pcbro/issues/2][issue 2]])
- [ ] data reduction.  This needs some serious thought and is mostly in the core of WCT.

** Field Roadmap

The PCB poses a greater need for a true 3D field response model than
do wires.  This roadmap gives a phased approach to get closer to the
ideal.

*** 2D response + 2D WCT

Quick hack to get something likely better than using PDSP response.

- [X] calculate 2D fields at various radial positions for a single-hole universe using the "many wire" trick and Garfield.
- [X] parse this to produce responses at two "slices" for each plane
- [X] generate WCT ~.json.bz2~ files with choice of which slices to select or average over
- [ ] save to ~wire-cell-data~
  - [ ] understand/fix apparent unipolar contribution to neighbor strips for paths in the shared hole.
- [ ] develop new 2D calculation with Garfield++
  - many-wire approximation
  - neBEM based geometry

*** 3D fields + 2D WCT sim+sigproc

Uses existing WCT unchanged.

- [ ] calculate 3D fields with realistic hole pattern (Garfield++/neBEM?, Garfield++/COMSOL?, pure COMSOL?)
- [ ] calculate response functions for paths starting on a square grid based on the usual 6 impact positions.  In one dimension/plane these span impacts and the other these span "slices" across the strip.  This tries to exploit the orthogonal symmetry of the PCB anode.  In general, (eg with wire planes) we need one set of paths per plane.
- [ ] for each plane, marginalize the response functions over the slice dimension to produce 2D response functions that may be used in current WCT simulation and sigproc


*** 3D fields + new 3D WCT sim

This has two possible branches of development

- [ ] develop full 3D simulation as a conceptual extension to the convolution technique used in current 2D WCT.  This will be very memory and computationally expensive.  We should consider the need for GPU (not merely as an optimization) but retain ability to run on CPU.  This may be something for CCE-PPS to work on.  I expect the best first step is a prototype using PyTorch.

- [ ] develop full 3D simulation as an MC using Garfield++.  Some concerns: too slow? not GPU'able? requires us to get deeper Garfield++ experience.


* Using PCBro

This goes through some basic programs to exercise parts of PCBro.

** Basic raw data decoding

The basic unpacking is done by code in [[file:inc/WireCellPcbro/BinFile.h][BinFile.h]].  It can be tested like:

#+begin_example
  $ ./build/test_BinFile <test> <file.bin>
#+end_example

With ~<test>~ being one of: read, package, link, trigger and file.

The WCT component that can inject ~.bin~ files into a WCT graph is
~PcbroRawSource~ and can be tested directly like:

#+begin_example
  $ ./build/test_RawSource <file.bin>
#+end_example

** Use Wire-Cell Toolkit

Install WCT with PDSP's data files (at least) doing something like:

#+begin_example
  $ cd /path/to/wire-cell-toolkit
  $ ./wcb configure --prefix=$PREFIX --with-jsonnet=$HOME/opt/jsonnet
  $ ./wcb --notests install --install-config=all
#+end_example

Make sure ~WIRECELL_PATH~ includes WCT's installed config and data
directory and pcbro's ~cfg/~, eg:

#+begin_example
  $ export WIRECELL_PATH=$PREFIX/share/wirecell:$HOME/dev/pcbro/cfg
#+end_example

** Wires 

PCB anode of course has strips but for sigproc we don't care about actual geometry and just need to gives conductor ordering.  PCBro has a WCT-like Python package which generates a "wire" file.


#+begin_example
  $ wirecell-pcbro gen-wires pcbro-wires.txt
  $ wirecell-util convert-oneside-wires pcbro-wires.txt pcbro-wires.json.bz2
#+end_example

The resulting ~.json.bz2~ file should go in a directory listed in your
~WIRECELL_PATH~.  A copy is committed in this repo at [[file:cfg/pcbro-wires.json.bz2][cfg/pcbro-wires.json.bz2]].

** WCT decoding

A PCB anode ~.bin~ file can be read by WCT, decoded and written to a Numpy ~.npz~ array file.  You can then plot the result with ~matplotlib~.  For example:

#+begin_example
  $ wire-cell -l stdout -L debug -l junk.log:debug \
              -A infile=<file.bin> -A outfile=<file.npz> \
              -c cfg/cli-bin-npz.jsonnet 

  $ ipython --pylab
  In [1]: f = numpy.load("<file.npz>")
  In [2]: plt.imshow(f['frame_bin2npz_31'])
  In [3]: plt.savefig("raw-31.png")
#+end_example

or from the CLI

#+begin_example
  $ wirecell-pcbro plot-one -t 31 -a 0.2 -T bin2npz -o raw-31.png raw.npz
#+end_example

[[file:raw-31.png]]

*N.B.: by default the induction plane data is duplicated in order to match WCT's expectation of 3 planes and to allow simultaneous testing of different induction response functions.*

** WCT sigproc

The raw ~.bin~ data can be read in, decoded, run through WCT signal processing and the result written to an Numpy ~.npz~ array file

*WARNING:* while the fields are being validated these results do not represent the ultimate efficacy.  See [[Roadmap]] for relevant details.  Until these are finalized, there will not be any officially, versioned field files but the latest can be retrieved:

#+begin_example
  $ wget https://www.phy.bnl.gov/~bviren/tmp/pcbro/pcbro-response-latest.tar
  $ tar -C pcbro/cfg -xf pcbro-response-latest.tar
#+end_example

It includes several different response files and their corresponding display as PNG files.  A particular response file may be given as an option to the ~wire-cell~ CLI:

#+begin_example
  $ wire-cell -l stdout -L debug -l junk.log:debug \
              -A infile=<file.bin> -A outfile=<file.npz> \
              -A resp=pcbro-response-indslc-colave.json.bz2 \
              -c cfg/cli-bin-sp-npz.jsonnet

  $ ipython --pylab
  In [1]: f = numpy.load("<file.npz>")
  In [2]: plt.imshow(f['frame_gauss0_31'])  
  In [3]: plt.savefig("trig31-gauss.png")
#+end_example

or from the CLI:

#+begin_example
  $ wirecell-pcbro plot-one -t 31 -a 0.2 -T gauss0 -o sig-31.png sig.npz
#+end_example


[[file:sig-31.png]]


*N.B. again, this does not represent ultimate capabilities as the fields are still being understood.*  The two copies of the induction plane are deconvolved with a different field slice.

** Multiple input files

The ~PcbroRawSource~ may be configured with one or a sequence of input ~.bin~ files and likewise so does the top-level "cli" Jsonnet.  With a little help from the shell you can pass multiple files via:

#+begin_example
  $ rm -f sig.npz
  $ time wire-cell \
    --tla-str outfile="sig.npz" \
    --tla-code infile="[ $(printf '"%s",' /home/bv/work/pcbro/Rawdata_05_26_2020/run01tri/WIB00step18_FEMB_B8_1590484*.bin ) ]" \
    -c cfg/cli-bin-sp-npz.jsonnet

  ...
  [15:14:29.460] D [ pcbro  ] RawSource: end of 29 files
  [15:14:29.460] I [ timer  ] Timer: WireCell::SigProc::OmnibusSigProc : 45.555553 sec
  [15:14:29.460] I [ timer  ] Timer: WireCell::Sio::NumpyFrameSaver : 4.5346904 sec
  [15:14:29.460] I [ timer  ] Timer: pcbro::RawSource : 2.6408951 sec
  [15:14:29.460] I [ timer  ] Timer: WireCell::Aux::TaggedTensorSetFrame : 0.27116203 sec
  [15:14:29.460] I [ timer  ] Timer: WireCell::Gen::DumpFrames : 0.061627306 sec
  [15:14:29.460] I [ timer  ] Timer: Total node execution : 53.06392828375101 sec

  real	0m55.183s
  user	0m52.199s
  sys	0m1.873s

  $ ls /home/bv/work/pcbro/Rawdata_05_26_2020/run01tri/WIB00step18_FEMB_B8_1590484*.bin|wc -l
  29

#+end_example

** Quick and dirty hand scanner

Process many ~.bin~ into a ~.npz~ file and then make a reduced ~.npz~ file by applying a threshold on activity.  The activity is calculated by subtracting a per-channel median and then summing all values above a minimum (def=5) and if the sum is larger than the threshold (default=5000) then save the array to the output ~.npz~.  You can then make a multi-page PDF.

#+begin_example
  $ rm -f raw-muons.npz; wirecell-pcbro activity raw.npz raw-muons.npz
  $ rm -f raw-muons.pdf; wirecell-pcbro plot-many -a 0.2 -o raw-muons.pdf raw-muons.npz
#+end_example


** Magnify support

A standard WCT validation and debugging tool it Magnify.  One can produce a Magnify file from a select trigger which will hold the original raw and signal processed output.

#+begin_example
  $ wire-cell -A resp=pcbro-response-indslc-colave.json.bz2 \
              -A start=32 -A triggers=1 \
              -A infile=<file.bin> -A outfile=<file.root> \
              -c cfg/cli-bin-sp-mag.jsonnet
#+end_example

